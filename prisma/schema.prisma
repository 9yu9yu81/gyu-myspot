generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  contact       String?
  accounts      Account[]
  sessions      Session[]
  rooms         Room[]
  wishlists     Wishlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RoomCategory {
  id            Int      @id @default(autoincrement())
  name          String
  rooms         Room[]
}

model RoomStatus {
  id            Int      @id @default(autoincrement())
  name          String
  rooms         Room[]
}

model RoomType {
  id            Int      @id @default(autoincrement())
  name          String
  rooms         Room[]
}

model SaleInfoType {
  id            Int      @id @default(autoincrement())
  name          String
  saleInfos     SaleInfo[]
}

model RoomHeat {
  id            Int      @id @default(autoincrement())
  name          String
  basicInfo     BasicInfo[]
}

model RoomStructure {
  id            Int      @id @default(autoincrement())
  name          String
}


model Room {
  id            Int      @id @default(autoincrement())
  category      RoomCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id   Int
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String
  status        RoomStatus   @relation(fields: [status_id], references: [id], onDelete: Cascade)
  status_id     Int      @default(1)
  type          RoomType    @relation(fields: [type_id], references: [id], onDelete: Cascade)    
  type_id       Int
  updatedAt     DateTime @default(now())
  title         String
  description   String   @db.VarChar(1000)
  views         Int      @default(0)
  wished        Int      @default(0)
  images        String   @db.VarChar(700)
  contact       String

  address       AddressInfo[]
  basicInfo     BasicInfo[]
  saleInfos     SaleInfo[]
  moreInfo      MoreInfo[]
  wishlists     Wishlist[]
}

model AddressInfo {
  id            Int      @id @default(autoincrement())
  room          Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id       Int      @unique
  name          String
  doro          String
  jibun         String
  detail        String
  lat           Float
  lng           Float
}

model BasicInfo {
  id            Int      @id @default(autoincrement())
  room          Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id       Int      @unique
  supply_area   Int
  area          Int
  total_floor   Int        
  floor         Int
  move_in       DateTime
  heat          RoomHeat     @relation(fields: [heat_id], references: [id], onDelete: Cascade)
  heat_id       Int

}

model SaleInfo {
  id            Int      @id @default(autoincrement())
  room          Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id       Int      @unique
  type          SaleInfoType @relation(fields: [type_id], references: [id], onDelete: Cascade)
  type_id       Int
  deposit       Int
  fee           Int

}


model MoreInfo {
  id              Int      @id @default(autoincrement())
  room            Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id         Int      @unique
  maintenance_fee Int
  maintenance_ids String?
  elevator        Boolean
  parking         Boolean
  parking_fee     Int
  structure_ids   String?
  option_ids      String?
}

model Wishlist {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String   
  room            Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id         Int      @unique @default(0)
}
